package openssl

import (
	"bytes"
	"testing"
)

func TestExtractHKDF(t *testing.T) {
	if !Enabled() {
		t.Skip("boringcrypto: skipping test, FIPS not enabled")
	}
	ikm := []byte{
		0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
		0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
		0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
	}
	salt := []byte{
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
		0x08, 0x09, 0x0a, 0x0b, 0x0c,
	}
	expected := []byte{
		0x07, 0x77, 0x09, 0x36, 0x2c, 0x2e, 0x32, 0xdf,
		0x0d, 0xdc, 0x3f, 0x0d, 0xc4, 0x7b, 0xba, 0x63,
		0x90, 0xb6, 0xc7, 0x3b, 0xb5, 0x0f, 0x9c, 0x31,
		0x22, 0xec, 0x84, 0x4a, 0xd7, 0xc2, 0xb3, 0xe5,
	}
	prk, err := ExtractHKDF(NewSHA256, ikm, salt)
	if err != nil {
		t.Log("ExtractHKDF failed", err)
		t.Fail()
	}
	if !bytes.Equal(prk, expected) {
		t.Log("PRK doesn't match")
		t.Fail()
	}
}

func TestExpandHKDF(t *testing.T) {
	if !Enabled() {
		t.Skip("boringcrypto: skipping test, FIPS not enabled")
	}
	prk := []byte{
		0x07, 0x77, 0x09, 0x36, 0x2c, 0x2e, 0x32, 0xdf,
		0x0d, 0xdc, 0x3f, 0x0d, 0xc4, 0x7b, 0xba, 0x63,
		0x90, 0xb6, 0xc7, 0x3b, 0xb5, 0x0f, 0x9c, 0x31,
		0x22, 0xec, 0x84, 0x4a, 0xd7, 0xc2, 0xb3, 0xe5,
	}
	info := []byte{
		0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7,
		0xf8, 0xf9,
	}
	expected := []byte{
		0x3c, 0xb2, 0x5f, 0x25, 0xfa, 0xac, 0xd5, 0x7a,
		0x90, 0x43, 0x4f, 0x64, 0xd0, 0x36, 0x2f, 0x2a,
		0x2d, 0x2d, 0x0a, 0x90, 0xcf, 0x1a, 0x5a, 0x4c,
		0x5d, 0xb0, 0x2d, 0x56, 0xec, 0xc4, 0xc5, 0xbf,
		0x34, 0x00, 0x72, 0x08, 0xd5, 0xb8, 0x87, 0x18,
		0x58, 0x65,
	}
	reader, err := ExpandHKDF(NewSHA256, prk, info)
	if err != nil {
		t.Log("ExpandHKDF failed", err)
		t.Fail()
	}
	buf := make([]byte, 42)
	n, err := reader.Read(buf)
	if n != len(buf) || !bytes.Equal(buf, expected) {
		t.Log("OKM doesn't match")
		t.Fail()
	}
}
